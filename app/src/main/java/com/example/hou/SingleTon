/*
public class SingletonJava {

    //饿汉模式
    //类加载的时候完成了初始化  所以类加载较慢
    //但获取对象速度较快  
    //基于类加载机制 避免了多线程同步问题
    
    private static SingletonJava instance = new SingletonJava();
    
    private SingletonJava(){
        
    }

    private static SingletonJava getInstance(){
        return instance;
    }

}
*/
/*
public class SingletonJava {
    //懒汉模式声明了一个静态对象(instance)  在用户第一次调用时初始化
    //注意线程不安全
    private static SingletonJava instance;
    private SingletonJava(){}
    
    public static SingletonJava getInstance(){
        if (instance==null){
            instance = new SingletonJava();   
        }
        return instance;
    }
    
}*/
/*public class SingletonJava {
    //懒汉模式声明了一个静态对象(instance)  在用户第一次调用时初始化
    //注意线程是安全的？？  但是每次调用getInstance时都要同步  造成不必要的开销
    private static SingletonJava instance;
    private SingletonJava(){}
    
    public static synchronized SingletonJava getInstance(){
        if (instance==null){
            instance = new SingletonJava();   
        }
        return instance;
    }
    
}*/

/*

public class SingletonJava {
    //双重校验模式声明了一个静态对象(instance)  在用户第一次调用时初始化
    //第一次判空是为了不必要的同步
    //第二次是在singleton等于null时创建实例
    //注意线程安全了
    private volatile static SingletonJava instance;
    private SingletonJava(){}
    
    public static SingletonJava getInstance(){
        if (instance==null){
            synchronized (SingletonJava.class) {
                if (instance==null){
                    instance = new SingletonJava();
                }
            }
        }
        return instance;
    }
    
}

*/


public class SingletonJava {
    //静态内部类单例模式
    
    private SingletonJava(){
        
    }
    
    public static SingletonJava getInstance(){
        return SingletonHolder.sInstance;
    }
    
    private static class SingletonHolder{
        private static final SingletonJava sInstance = new SingletonJava();
    }
    
    
    
}
